# -*- coding:utf-8 -*-
#+AUTHOR: ifritJP
#+STARTUP: nofold
#+OPTIONS: ^:{}

#+TITLE: What's game-message-tts

このツールは、
「PC のゲーム画面のメッセージを Text To Speech(TTS) で読み上げる」というものです。

ただし、対応は英語のみで、日本語等は非対応です。

何故こんなツールを作ったかというと、
英語学習用に海外のゲームをプレイしているんですが、
そのゲームに音声が付いておらずリスニング力向上に使えないため、
どうにかして音声を付けようと思ったのが動機です。

また、Windows の標準機能で、Window 内のラベル等を読み上げる機能がありますが、
あれは Windows の標準 GUI 部品を対象にしていて、
標準 GUI 部品ではないゲーム画面のメッセージなどは非対応になっているため、
ゲーム画面のメッセージの読み上げには使えなかった事も、理由の一つです。

* 機能

このツールは次の機能を提供します。

- ゲーム画面を OCR して、抽出したメッセージを Text To Speech で読み上げ
- 読み上げスピードの調整、リピート再生
- メッセージの日本語翻訳 (Google 翻訳)
- メッセージの保存
- ゲーム毎の設定切り替え

* 使用方法

このツールの使用方法について説明します。

** 環境

このツールは、 Windows 上で動作します。

** インストール

次のソフトのインストールが必要です。

- Tesseract OCR
  - PATH の設定
- Python
  - 幾つかの Python 用パッケージ
- このツール    

Windows と Python の知識が多少あることが前提です。

** 起動方法

run.pyw をダブルクリックします。   

起動すると、コンボボックスとボタンを持つウィンドウが表示されます。

ここでは OK を押します。

次にいくつかのボタンを持つウィンドウが表示されます。
ここでは、まず game tile の箇所にゲームタイトルを入力します。
デフォルトでは *notepad* と入力されているので、
ここをクリアしてタイトルを入力してください。

** 設定

このツールは、ゲーム毎に次の設定をする必要があります。

- ゲーム画面を認識するための ゲーム Window 情報
  - タイトル名
  - クラス名
- メッセージ領域認識方法
- メッセージ抽出用の閾値
  
設定は adjust parameter ボタンを押して表示されるウィンドウで行ないます。

以降で各設定値について説明します。  


*** ゲーム画面を認識するための ゲーム Window 情報

このツールは、 「PC のゲーム画面のメッセージを Text To Speech で読み上げる」ツールです。

これを実現するには、まずどこにゲーム画面があるのかを認識する必要があります。

その手段として、ゲーム Window 情報を利用します。

Window には、必ずタイトルバーに表示するタイトル名と、
その Window の機能を識別するクラス名があります。

両方あるいは、どちらかを指定します。

指定の方法は簡単で、
window list の combobox の中から、ゲームの Window を選択するだけです。

もし、ゲームの Window が window list に無い場合、このツールを起動しなおします。

通常は、これで問題ありません。

しかし、一部のゲームではタイトル名が随時更新されるものがあります。
そのような場合、 window title は空にし、 window class だけ指定してください。

window title が空の場合、
タイトル名は無視して window class だけでゲームの window を検索します。

*** メッセージ領域認識方法

ゲームのメッセージを認識するには、
メッセージがどこに表示されているのかを認識する必要があります。

メッセージの領域を認識する方法として、次の 2 つの方法を用意しています。

- ゲーム内の固定領域を指定する
- 領域を指定せずに自動で領域を認識する
  
ここでは「固定領域を指定する」方法について説明します。

**** 「固定領域を指定する」方法

まず「メッセージボックスの領域を指定する」にチェックを入れます。

次に、領域を指定するためにゲーム window を前面に表示します。

この時、他の window とゲーム画面が被らないように window を移動してください。

次に、 「set region」ボタンを押します。
すると、ゲーム画面の上に半透明の window が表示されるので、
ゲームのメッセージ領域をマウスで指定します。

指定が終わると、半透明の window が消えます。
  
なお、「自動で領域を認識する」方法は実験中の機能です。

原則として、使用しないでください。

*** メッセージ抽出用の閾値

ここまでで、メッセージ領域の特定が出来るようになりました。

次は、メッセージ領域からメッセージを抽出するための閾値を指定します。

メッセージ領域には、さまざまなデザインが施されていることがあります。

そのようなデザインは OCR にはノイズとなり、
正確な結果を得るには取り除く必要があります。

そのため、ここではデザインと文字とを区別するための、
メッセージ領域の明度の閾値を指定します。

threshold と示されているスライドバーを適宜調整します。

なお、スライドバーを適宜動かして、 Test ボタンを押します。

Test ボタンを押すことで、実際にゲーム画面をキャプチャして OCR まで行ないます。
このとき、処理途中段階の画像が表示されるので、何かキーを押すか、
画像の Window を閉じることで処理が先に進みます。

OCR 結果は、 Test ボタンの下のテキストボックスに出力されます。

この結果が表示されているメッセージと等しくなるように、スライドバーを調整してください。

このスライドバーの調整値によって、OCR の結果が変化します。
理由は不明ですが、処理途中段階の画像の見た目には大きな変化がないような場合でも、
OCR の結果が著しく変化することがあります。


以上で OCR のための設定は終了です。


** OCR から読み上げまで

OCR の設定後は、 
ゲームのメッセージが更新される毎に *OCR* ボタンを押します。

OCR ボタンを押すと、 OCR でメッセージを抽出し、
Text To Speech でメッセージを読み上げます。

OCR されたメッセージは、
OCR ボタン上方のテキストエリアに出力されます。
もし、OCR 結果に間違いなどあれば、
このテキストエリアを修正することで、
TTS での読み上げを修正できます。

TTS の読み上げを再生する場合は play ボタンを押します。

translate ボタンは、 google 翻訳を使用して日本語編訳します。

なお、TTS のボリューム、スピードは、
ツール下部の volume, speed で調整できます。


ゲームによっては、
メッセージ領域にアイコンが表示されていることがあります。

このアイコンによって、 OCR 結果にゴミが載ることがあります。
そのようなゴミを除去するのが *exclude re-pattern* です。

これは、 OCR 結果のメッセージから文字を削除するための
パターンを指定するものです。

パターンは python の正規表現を使用します。

* 履歴

このツールの OCR の出力結果は、履歴として記録します。

履歴は history.json に保存します。

いまのところ記録するだけで、グラフ表示等の機能はありません。

* ゲーム毎の設定切り替え

ツール起動時の画面で <new config> を選択することで、
新しい設定を作成します。

このとき、ゲームのタイトルをダミーで作成するので、
任意に設定してください。


* 最後に

英語力が少しでも向上するように、お互い頑張りましょう。


以上です。
